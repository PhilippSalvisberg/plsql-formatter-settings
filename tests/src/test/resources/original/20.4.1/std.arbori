allLeaves: [leaf+1 = leaf);

-- predicate with no attributes but one tuple:
runOnce: \\leaf(allLeaves/*Anything non-empty would suffice*/) | []; 

false: [];   

"Global definitions": runOnce    
-> {   
    var logger = Java.type('oracle.dbtools.util.Logger');
    // logger.info(null,"Defined logger"); 
    // --also available: logger.severe(), .warn(), .fine() 
    
    var count = 0;
    var accumulatedString = "";
    var accumulatedSet = [];
    var startedTimeMs = java.lang.System.currentTimeMillis();  
    
    function logTuple() {
        print("evaluating "+tuple);
        return true;
    } 
    
    /**
     * Arbori program with numerous auxiliary predicates often results 
     * in overwhelming number of tabs at SQLDev Arbori execution panel 
     */
    function removeTabsExcept( tabArray ) {
        var execOrder = program.querySequence();
        var copy = execOrder.clone();
        for( tabNo = execOrder.length-1; 0 <= tabNo; tabNo=tabNo-1 ) {      
            var exclude = true;
            for( tIndex in tabArray ) {
                if( tabArray[tIndex] == execOrder[tabNo] )
                    exclude = false;
            }
            if( exclude ) {
                execOrder.remove(tabNo);
            }
        }
        var Thread = Java.type('java.lang.Thread');
        new Thread(function () {
             Thread.sleep(1000);
             execOrder.clear();
             execOrder.addAll(copy);
        }).start();
    } 
    
    /* Text input recognized under the parse tree node named nodeVar */
    /* CAREFUL: it is an attribute name, not the ParseNode */
    function nodeContent(nodeVar) {
        var node = tuple.get(nodeVar);
        return target.input.substring(
            target.src[node.from].begin,
            target.src[node.to-1].end
        );
    }
    
    /** https://vadimtropashko.wordpress.com/2020/05/29/java-script-conditions/ 
     * @param attr  the parse tree node name
     * @param cmp   string literal to compare against   
     */   
    function stringMatch( attr, cmp ) {
        return nodeContent(attr) == cmp;
    }
    
    /***
       select * from employees
       where employee_id in (1,2,3,4,5,6,7,8,9)
       and manager_id in (11,12,13);
     *     
       "Commas in IN lists": [node) ','
               & [ancestor) in_condition
               & ancestor < node
       -> {
           aggrCount('ancestor','node');
       }

       "Find all IN lists which are shorter than 5 elements": [node) in_condition
              & .havingLE('node','5')
       -> {
           print(tuple);
       }
     ***/         
    var listLengths = [];   /* list container node mnemonic e.g. '[5,26) -> running counts */  
    function aggrCount( aggrCol, cntCol ) {
        var aggrMnemonic = tuple.get(aggrCol).interval();  
        var cntBefore = listLengths[aggrMnemonic];
        var node = tuple.get(cntCol);
        var nodeMnemonic = node.interval();
        if( cntBefore == null )
           cntBefore = 0;
        cntBefore++;
        listLengths[aggrMnemonic] = cntBefore;
    }
    function havingLE( aggrCol, cnt ) {
        var nodeMnemonic = tuple.get(aggrCol).interval();  
        var val = listLengths[nodeMnemonic];
        if( val <= cnt )
            return true;
        return false;
    }
     	   
}