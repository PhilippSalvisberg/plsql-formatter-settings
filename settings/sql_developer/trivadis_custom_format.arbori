/*
 * Copyright 2021 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Lightweight Formatter for SQL Developer and SQLcl
 * The idea is to keep the code formatted "as is" and apply chosen formatting rules only.
 *
 * The Arbori program is processed from top to bottom.
 * It uses include files, since SQLDev 20.4.1 cannot process the Arbori program in 
 * a single file.
 *
 * To structure the Arbori program the concept of "phases" and "sections" are used.
 * A phase consists of one ore more sections.
 * A section consists of one or more Arbori queries.
 *
 * The following phases and sections are defined:
 *
 * - Phase 0 - Main Configuration. (trivadis_custom_format.arbori).
 *     - I1: Minimal Arbori program (expected by the formatter).
 *     - I7: Include Arbori programs.
 *
 * - Phase 1 - Initialization and preprocessing. (trivadis_custom_format_phase1.arbori).
 *     - D1: Initialize timer.
 *     - I2: Globals.
 *     - I3: Remove duplicate empty lines.
 *     - I4: Keep existing whitespace.
 *     - I5: Remove duplicate spaces in scope.
 *
 * - Phase 2 - Processing section by section. The processing order is important. (trivadis_custom_format_phase2.arbori).
 *     - A1: Do not use tabs.
 *     - A2: Remove trailing spaces.
 *     - A3: Do not format code between @formatter:off and @formatter:on comments.
 *     - O2: White Space: Around operators. Options: true; false. (spaceAroundOperators).
 *     - A13: Keep short nodes on the same line.
 *     - A5: No space before node.
 *     - A6: No space after node.
 *     - A7: One space before node.
 *     - A8: One space after node.
 *     - A17: Whitespace around node.
 *     - A15: Line break before node.
 *     - A14: Line break after node.
 *     - O3: White Space: Around parenthesis. Options: Default; Inside; Outside; No space. (spaceAroundBrackets).
 *     - R3: One command per line & R4: Keywords "loop", "else", "elsif", "end", "when" on a new line.
 *     - O6: Line Breaks: SELECT/FROM/WHERE. Options: true; false. (breaksAfterSelect).
 *     - O9: Line Breaks: On Boolean connectors. Options: Before&After; Before; After; No Breaks.
 *           (breaksAroundLogicalConjunctions).
 *     - A12: Line breaks before THEN after multiline conditions.
 *     - O12: Line Breaks: IF/CASE/WHILE. Options: Indented Actions, Inlined Conditions;
 *            Terse (line breaks only after actions); Line breaks after Conditions and Actions;
 *            Indented Conditions and Actions. (flowControl).
 *     - O1: Line Breaks: On concatenation. Options: Before; After; No Breaks. (breaksConcat).
 *     - O10: Line Breaks: On ANSI joins. Options: true; false. (breakAnsiiJoin).
 *     - O11: Line Breaks: On subqueries. Options: true; false. (breakOnSubqueries).
 *     - A16: Line break if the parent element uses multiple lines.
 *     - R5: Commas in front of separated elements.
 *     - R2: 3 space indention.
 *     - R7: SQL keywords are right aligned within a SQL command.
 *     - A11: Align parameter names.
 *     - A10: Align parameter modes.
 *     - O8: Alignment: Type Declarations. Options: true; false. (alignTypeDecl).
 *     - O4: Alignment: Assignment Operator :=. Options: true; false. (alignAssignments).
 *     - O5: Alignment: Column and Table aliases. Options: true; false. (alignTabColAliases).
 *     - O7: Alignment: Equality Predicate =. Options: true; false. (alignEquality).
 *     - R6: Call parameters aligned, operators aligned, values aligned.
 *     - A9: Align xmltable columns.
 *     - A4: Split long lines.
 *     - D2: Log time spent in this program.
 *
 * The start of a phase is visualized by a comment series like this
 *
 * -- ================================
 * -- Phase <PhaseNumber> - <Comment>.
 * -- ================================
 *
 * The sections have the following format <Category><SectionNumber>.
 * The next table explains the meaning of a category:
 *
 * Cat.  Meaning                 Description                                             Phases
 * ----  ----------------------  ------------------------------------------------------  ------
 * D     Debug                   Initialize or produce debugging output.                 1, 2
 * I     Initialization Section  Identifies a section in an initialization phase.        1
 * O     SQLDev Option           Implements a SQL Developer option (Advanced Format).    2
 * R     Trivadis Rule           Implements a Trivadis PL/SQL & SQL Guideline.           2
 * A     Add-on Section/Rule     Additional formatting rule, that is not based on        2
 *                               the Trivadis PL/SQL & SQL Guidelines. Nonetheless it's
 *                               considered important to improve the formatting result.
 *
 * The SectionNumber identifies a section within a category.
 *
 * The start of a section is visualized by a comment series like this
 *
 * -- -------------------------------------
 * -- <Category><SectionNumber>: <Comment>.
 * -- -------------------------------------
 *
 * The lightweight formatter honors most of the SQLDev options. However, the following options
 * are ignored, have limitations or are considered only partially:
 *
 * - Indentation: indent with. Options: Tab; Spaces. (useTab).
 *   The formatter supports only indentation with spaces. Spaces are used even if "Tab" is configured.
 *   Using tab would lead to various issues in combination with other settings (e.g. leading commas).
 *
 * - Line Breaks: Commas per line in procedures. Options: Integer value. (breaksProcArgs).
 *   The formatter ignores this configuration.
 *   The idea of the lightweight formatter is to leave this decision to the developer.
 *
 * - Line Breaks: For compound_condition parenthesis. Options: true; false. (breakParenCondition).
 *   The formatter ignores this configuration.
 *   The idea of the lightweight formatter is to leave this decision to the developer.
 *
 * - Line Breaks: After statements. Options: Double break; Single break; Preserve original. (extraLinesAfterSignificantStatements).
 *   The formatter ignores this configuration.
 *   The idea of the lightweight formatter is to leave this decision to the developer.
 *
 * The following SQL options are honored, but not implemented by this Arbori program.
 * They are implemented by SQLDev's oracle.dbtools.app.Format class. As a result the behavior cannot be overridden.
 *
 * - Format:
 *   - Convert Case Only. Options: true, false. (adjustCaseOnly).
 * - Advanced Format:
 *   - General: Keywords case. Options: UPPER; lower; Init cap; Keep unchanged. (kwCase).
 *   - General: Identifiers case. Options: UPPER; lower; Init cap; Keep unchanged. (idCase).
 *   - General: 1-line long comments. Options: Keep unchanged; Wrap multiline; Wrap singleline. (singleLineComments).
 *   - Line Breaks: Before line comments. Options: true; false. (forceLinebreaksBeforeComment).
 */

-- ====================================================================================================================
-- Phase 0: Main Configuration. (trivadis_custom_format.arbori).
-- ====================================================================================================================

-- --------------------------------------------------------------------------------------------------------------------
-- I1: Minimal Arbori program (expected by the formatter).
-- --------------------------------------------------------------------------------------------------------------------

-- Callback function to ensure numeric literals are formatted correctly (without whitespaces)
dontFormatNode:
    [node) numeric_literal
->
;

-- ":indentCondtions" must be used, otherwise the Arbori program will be considered invalid and the default is used.
-- This rule is never called, hence it does not matter what node is selected.
-- However, I chose to use "identifier" to avoid an Arbori warning.
dummy:
    :indentConditions & [node) identifier
;

-- "skipWhitespaceBeforeNode" must be defined, otherwise the Arbori program will be considered invalid and the default is used.
skipWhiteSpaceBeforeNode:
  [runOnce) sql_statements
-> {
    var doNotCallCallbackFunction;
}

-- analytic functions, to be treated as keywords
"analytics":
      [identifier) identifier
    & [call) analytic_function
    & [call = [identifier
;

-- all identifiers
"ids":
    [identifier) identifier
;

-- Callback function to reduce the list of keywords by the identifiers provided here
identifiers:
    "ids" - "analytics"
->
;

-- --------------------------------------------------------------------------------------------------------------------
-- I6: Include Arbori programs.
-- --------------------------------------------------------------------------------------------------------------------

-- Arbori program is too large for a single file.
-- Using include file is mandatory for SQLDev 20.4.1.
-- Include files are executed first, regardless of the position of the include directive in the Arbori program.

-- The system property dbtools.arbori.home determines the root directory for relative path names.
-- This property is set in the test environment and in format.js.
-- For SQLDev either dbtools.arbori.home must be configured in ${user.conf} or absolute path names must be used.

include "trivadis_custom_format_phase1.arbori"
include "trivadis_custom_format_phase2.arbori"
